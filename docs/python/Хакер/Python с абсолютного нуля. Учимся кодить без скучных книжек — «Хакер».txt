Python с абсолютного нуля. Учимся кодить без скучных книжек — «Хакер»

Если ты думаешь, что хакеру программирование не нужно, то глубоко ошибаешься! Да, можно качнуть Kali Linux и юзать готовые программки, копипастить код с форумов и вслепую качать скрипты с GitHub. Но потолок твоих умений, пока ты не научишься писать и понимать код, будет низким. В этой статье я попытаюсь в доступной форме научить тебя основам программирования. Начинаем с абсолютного нуля! 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим От редакции 

Недавно мы проводили опрос о том, какой курс по Python был бы интереснее читателям. Две первые строчки с большим отрывом в нем заняли варианты «для хакера» и «Python с нуля». Узнав о таком положении дел, мы немедленно заказали статью о том, как начать программировать на Python. Если она будет иметь успех, то может превратиться в целую серию. Отличие нашего подхода — в том, что мы объясняем все живым языком и даем нескучные примеры. В общем, обучение в фирменном стиле «Хакера»! 

И, поскольку это эксперимент, статья доступна без платной подписки. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Если у тебя на компе есть современный дистрибутив Linux, то в него уже входит Python 3, а писать первые программы будет удобно в IDLE — простом редакторе кода, который прилагается к Python. В Ubuntu, чтобы установить его, набери в консоли

sudoapt-getinstallidle3 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим В Windows при установке Python обязательно отметь на первом экране установщика галочку Add to Path, чтобы можно было запускатьpython3из командной строки в любом удобном месте.

Запустив IDLE, зайди в Options → Configure IDLE, перейди на вкладку General и поставь галочку на пункте Open Edit Window, нажми ОK и перезапусти IDLE. Теперь можно писать программы, сохранять их и запускать клавишей F5. Ну что, погнали? 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Переменные 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим В любом языке программирования есть такая штука, как переменные. Это как в школьной алгебре: вот переменнаяa=1, вот переменнаяb=2. То есть это такие абстрактные штуки, внутри них лежит значение, которое может меняться — например, когда ты пишешь после переменной знак равно и какое‑то новое значение.

Ну, то, чтоprint(a) — это команда, которая печатает на экране текущее значение переменной, ты уже понял. Ты написал после знака равно снова саму переменную+2, то есть сначала в переменной было значение 2, потом к этому значению прибавили еще 2. На экране гордо красуется 4. Поздравляю, два и два сложили! 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим А если изначально неизвестно, какие числа надо складывать? Тогда пришлось бы сперва попросить юзера ввести их в консоли и нажать Enter. Давай так и сделаем:

a=input('Введи,сколькоутебялитровпива:') 

b=input('Сколькопивапринесдруг:') 

c=int(a)+int(b) 

print('Надвоихувас:'+str(c)+'литровпива') 

Внутри скобочек у input ты пишешь пояснение для юзера, что конкретно его просят ввести. Но вот беда, по умолчанию все, что вводится через input, считается не числом, а строкой, поэтому, прежде чем складывать количество литров пива, нужно сначала преобразовать введенные строки в числа с помощью функции int(). 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим info 

Слово «функция» должно быть знакомо тебе из математики. В скобках мы пишем то, что она принимает (аргумент), а на выходе будет результат. Python сначала подменит переменную на ее текущее значение (int(a)на, скажем,int("5"), а потом функцию — на результат ее выполнения, то есть 5. Бывает, что функция ничего не возвращает, только что‑то делает. Например,print()только печатает аргумент. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Окей, преобразовал строки в числа, положил их в переменнуюc, а дальше‑то что за треш внутри скобок у print? Тут складываются строки (строки всегда пишутся внутри кавычек), поясняющие, что именно выводится на экран, а результат сложения передается в функциюprint().

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Чтобы строки безболезненно сложились с переменнойc, в которой лежит число, надо преобразовать его в строку функциейstr() — так же как мы превращали строки в числа, только наоборот.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Вообще, типов переменных много, но суть ты уловил — чтобы производить с переменными какие‑то действия, нужно их сначала привести к одному типу — к строковому, или к числовому, или еще к какому‑нибудь. Если с этим не заморачиваться, Python сложит не числа, а строки и введенные 2 и 3 литра пива в сумме дадут не 5, а целых 23. Хорошо бы так было в реальности!

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Вот еще примерчик, рассчитывающий, сколько тебе еще пить пиво, исходя из средней продолжительности жизни в России:

a=input('Введи,сколькотебелет:') 

b=73-int(a) 

print('Осталосьпримерно:'+str(b)+"лет") 

Здесь мы вызываем функциюinput(), чтобы получить значение, вычитаем его из 73 (средняя продолжительность жизни россиянина), не забыв превратить строку в число, а потом печатаем результат, превратив число обратно в строку и сложив с другими строками. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Итак, ты узнал, что такое целочисленные и строковые переменные, что эти типы можно преобразовывать друг в друга командамиint()и str(). К тому же теперь ты умеешь получать переменные от пользователя с помощью функцииinput('Введитечто-то')и печатать результаты с помощью функцииprint().

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Условия 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим В основе любой программы лежат условия. В зависимости от того, выполняются они или не выполняются, программа может пойти по одному или другому пути. Представь, ты едешь на машине и смотришь на часы: если уже есть десять вечера, то поворачиваешь домой, если нет, то можно заехать в гости. Точно так же работает и программа: проверяет какое‑то значение и сворачивает туда или сюда и выполняет соответствующий кусочек кода.

beer=input('ВведитеYes,еслипивоесть,иNo,еслипиванет:') 

ifbeer.lower()=='yes': 

result='ТывзломаешьПентагон' 

else: 

result='Тысломаешьсвоймозг' 

print(result) 

На английском if значит «если», а else — «иначе» или «в противном случае». В строчке после if идет условие, которое мы проверяем. Если оно верно, выполняется первый блок кода (он отделен четырьмя пробелами вначале). Если неверно, то тот, что послеelse:. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим info 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим

Блоки кода в Python отделаются отступами. Отступ на самом деле может быть любым, например некоторые предпочитают использовать вместо четырех пробелов клавишу Tab. Главное — не смешивать в одной программе отступы разного типа. Если уж начал использовать четыре пробела, то используй по всей программе, а то Python будет на тебя ругаться и унижать. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Еще один важный момент здесь — это знак равенства в условии. Он пишется как двойное «равно» (==) и этим отличается от присвоения — одинарного «равно».

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Функция lower(), прежде чем сравнивать условие, делает все буквы в строке маленькими, потому что глупый юзер может ввести слово YES с горящим Caps Lock, и это надо предусмотреть заранее.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Давай попробуем сделать условие для проверки логина и пароля, используя оператор И, который пишется как and. Он нужен для того, чтобы проверить одновременно выполнение первого и второго условия.

myname=input('Введителогин:') 

mypass=input('Введитепароль:') 

ifmyname=='xakep'andmypass=='superpassword123': 

result='Добропожаловать,овеликийхакер!' 

else: 

result='Тыктотакой,давайдосвидания...' 

print(result) 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим info 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим

Оператор в Python — это символ, который выполняет операцию над одной или несколькими переменными или значениями: арифметические («плюс», «минус», «равно» и так далее), сравнения (двойное «равно», «больше», «меньше» и прочее), присваивания (равно и несколько других), логические операторы (and

,or

,not

), операторы членства (in

,notin

) и операторы тождественности (is

,isnot

). Еще есть побитовые операторы для сравнения двоичных чисел. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Давай создадим еще более сложное условие, использовав операторor, который переводится как ИЛИ.

myname=input('Введителогин:') 

mypass=input('Введитепароль:') 

if(myname=='ivan'andmypass=='superpassword123')or(myname=='marina'andmypass=='marinka93'): 

result='Привет,'+myname+'.Добропожаловать!' 

else: 

result='Тыктотакой,давайдосвидания...' 

print(result) 

Здесь используются скобки — Python не требует скобок для простых условий, но для сложных они применяются, чтобы явно определить порядок действий. Программа приветствует только двух пользователей,ivanилиmarina. То есть сначала проверяется, не совпали ли логин и пароль с логином и паролем Ивана, а потом после оператораorпроверяется то же для Марины. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим info 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим

Когда нужно проверить не одно, а сразу два или три условия, ты можешь заключить каждое из них в скобки, а между ними ставить операторыor

илиand

. В случаеor

общее условие выполняется, если выполняется хотя бы одно из входящих в него условий. В случае сand

, чтобы общее условие выполнилось, должны выполниться оба входящих в него условия. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Вот еще пример, в нем используетсяelif, который означает что‑то вроде ИНАЧЕ‑ЕСЛИ. Это применяется для задания нескольких блоков команд: в случае, если одно условие не выполняется, с помощью ELIF проверяется следующее и так далее.

v=int(input('Введи,сколькотебелет:')) 

ifv<18: 

print('Привет,юныйхацкер') 

elifv<30: 

print('Превед,олдскул') 

elifv<65: 

print('РешилпересестьсассемблеранаPython?') 

elifv<100: 

print('Напенсии—самоевремяпокодить') 

elifv<100000: 

print('Кланбессмертныхприветствуеттебя!') 

В качестве условий могут выступать различные операторы сравнения: 

a==9(a равно 9) 

a !=7(a не равно 7) 

a >5(a больше 5) 

a <5(a меньше 5) 

a >=3(a больше или равно 3) 

a <=8(a меньше или равно 8) 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Ты также можешь инвертировать истинность условия (true) на ложность (false) и обратно с помощью словаnot.

beer=input('ВведиYes,еслипивоесть,иNo,еслипиванет:') 

ifbeer.lower()=='yes': 

print('Пиванет!') 

ifnotbeer.lower()=='yes': 

print('Ура,пивоещеесть!') 

Например, нужно, чтобы человек ввел числоне(NOT) меньше 5. 

x=int(input('Введи,сколькоуваслитровпива:')) 

ifnot(x<5): 

print('Всенормально,можноначинатьвзлом') 

else: 

print('Пиванедостаточно.') 

Списки 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Обычные переменные хороши для хранения одиночных значений, будь то строка или число. Но иногда нужно хранить группу переменных. Здесь на помощь приходят списки.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Например, список может быть таким:

Каждый элемент списка имеет свой индекс. Чтобы получить одно из значений списка, можно обратиться к его порядковому номеру. Нумерация в списках идет не с единицы, а с нуля, то есть 0, 1, 2, 3, 4... 

Командаprint(a[2])напечатает число 90 — третий элемент (нумерация‑то с нуля!) в списке, который был объявлен выше. Элементов в списках может быть сколько угодно. 

Также можно сделать список строк: 

b=['Маша','Ваня','Лена','Марина','Арнольд'] 

Тогдаprint(b[1])напечатает строчкуВаня. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Ты можешь добавить в существующий список новое значение с помощью методаappend:

Теперь список выглядит так: 

b=['Маша','Ваня','Лена','Марина','Арнольд','Дима'] 

Если надо обратиться к какому‑то элементу списка, считая от конца этого списка, можно писать отрицательные числа. Например, последний элемент списка имеет индекс -1, а print(b[-1])напечатаетДима. 

Любой список можно отсортировать по возрастанию или по алфавиту. 

a=[67,5,90,20,30] 

a.sort() 

После выполнения функцииa.sort()список примет такой вид:[5,20,30,67,90]. 

Теперь немного о срезах. Срез — это как бы получение какой‑то части списка, которая, в свою очередь, тоже является списком. Срезы задаются таким образом: 

Здесьx — номер элемента, с которого берется срез,y — последний элемент среза,z — интервал, через который мы берем элементы (необязательное значение). 

Получаем срез элементов спискаbс 1 и до 3 (4 не включается в срез): 

Получаем срез элементов спискаbс 2 и до конца: 

Получаем каждый второй элемент списка: 

Меняем порядок элементов списка на обратный: 

Кстати, обычные строки тоже поддерживают срезы, их результат тоже будет строкой. Например: 

s='Helloworld' 

print(s[:5]) 

На экран выведется Hello, потому что мы напечатали первые пять символов строки. 

Элементами списка могут быть другие списки. Чтобы обратиться к элементам списка внутри списка, используй еще одни квадратные скобки: 

a=[[1,2,3],[44,45,46]] 

Такой список из списков называется двумерным и напоминает таблицу. Например, чтобы получить первое число во второй строке (индексы 0 и 1, поскольку нумерация с нуля), нужно написать: 

Результат будет 44. 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Список — это изменяемая последовательность. Это значит, что если ты сотворишь какие‑то действия над списком, то тебе не придется его переопределять и заново сохранять в переменную. А вот строка — это неизменяемая последовательность. Если ты с ней что‑то сделаешь, то придется куда‑то поместить полученное новое значение.

Еще один неизменяемый тип данных — это кортеж. Это тот же список, но ты не можешь его изменять. Так он занимает меньше памяти. Объявить кортеж можно с помощью круглых скобок: 

Множество — еще одна последовательность элементов, каждый из которых не имеет своего индекса. То есть элементы не упорядочены и ты не можешь обратиться к ним по индексу. Зато все элементы множества уникальны и не повторяются. Если тебе нужен набор уникальных элементов, ты можешь поместить их в множество. Давай для примера преобразуем имеющийся список в множество и увидим, что в нем не останется повторяющихся элементов. 

l=[1,2,2,3,3,4,1] 

m=set(l) 

print(m) 

Результат:set([1,2,3,4]), то есть повторяющиеся элементы исчезли. Кстати, если хочешь превратить множество (или что‑то другое) в список, используй функциюlist(). 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Циклы 

Цикл — это блок команд, который повторяется определенное количество раз. Циклы можно задавать разными способами. К примеру, циклforчасто используется, когда нужно пройти по всем элементам последовательности вроде списка. 

lst=[15,50,60,97,78] 

forxinlst: 

x=x+1 

print(x) 

Здесь изначально имеется список чисел, а далее с помощью конструкцииforxinlstпроходим по очереди каждый элемент этого списка и совершаем с ним какие‑то действия. Эти действия, как и в случае с условиями, отделяются отступом. 

Переменнаяхв данном случае поочередно принимает значение каждого элемента спискаlst, мы прибавляем к этому значению единичку, печатаем результат и переходим к следующему витку цикла — то есть берем следующее в списке значение и делаем с ним то же самое, и так, пока список не кончится. 

Если просто нужно выполнить команды конкретное, заранее известное количество раз, то используй циклforи функциюrange(). 

num=0 

foriinrange(5): 

num=num+1 

print('Я'+str(num)+'кружкапива') 

Если у тебя есть какой‑либо список, можно легко пробежать по нему циклом: 

mas=['Ленин','Сталин','Хрущёв','Брежнев','Горбачёв','Ельцин','Путин','Медведев'] 

#Ахда,Путинжепотомвернулся.Нужнодобавитьегоещераз. 

mas.append('сноваПутин') 

forxinmas: 

print('Был'+x+'апосленего...') 

Теперь пора узнать о спискеwhile. Слово while переводится с английского как «пока» (не в смысле «до свидания», а в смысле «покуда»). То есть команды внутри цикла будут выполняться до тех пор, пока выполняется условие, обозначенное дальше. Например, вот цикл, который напечатает все четные числа от 1 до 100. 

a=0 

whilea<100: 

a=a+1 

if(a%2)==0: 

print(a) 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим В циклеwhileнадо явно указывать изменение переменной, которая отвечает за условие, иначе цикл может стать бесконечным и программа зависнет.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Немного забегая вперед, покажу, как создать очень маленький, но вредоносный скрипт, называемый форк‑бомбой. Он бесконечно создает свои копии в ОЗУ, чем может вызвать нехилые тормоза:

importos 

whileTrue: 

a=os.fork() 

Тут мы делаем новую вещь, которую тоже стоит запомнить, — импортируем модуль, а именно модульos, в котором содержатся команды для обращения к разным функциям операционной системы. 

Потом внутри циклаwhileсоздаем бесконечные копии. В качестве условия мы здесь написали простоTrue, то есть просто «истина». Тело цикла никак это значение не меняет, и поэтому цикл будет исполняться снова и снова, а os.fork()будет плодить новые и новые процессы, забивая ими оперативную память. Так что, товарищ, будь аккуратней с цикломwhile! 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Практическая задача: мониторим буфер обмена 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим А теперь от учебных примеров перейдем к чему‑нибудь интересному! В конце концов, мы ведь изучаем программирование не просто из любопытства. Давай напишем программу, которая будет следить за тем, что происходит в буфере обмена.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Одна из сильных сторон Python — это огромная база готовых модулей, которые можно брать и подключать к своим программам. Чтобы их установить и использовать внутри своих программ, можно заюзать менеджер пакетов под названием pip. Будем считать, что pip у тебя уже установлен.

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Первым делом ставим при помощи pip модуль, который отвечает за работу с буфером обмена. В Windows это будет вот такая команда:

В Linux — слегка другая: 

Переходим к кодированию. Наша программа будет мониторить буфер обмена и печатать на экране любой текст, который копирует пользователь. Пояснения я дал в виде комментариев, они в Python отбиваются знаком#в начале строки. 

#Подключиммодульдляработысбуферомобмена 

importpyperclip 

#Подключиммодульдляработыссистемнымвременем 

importtime 

#Задаемпеременнуюoldиприсваиваемейпустуюстроку 

old='' 

#Начнембесконечныйциклслежениязабуферомобмена 

whileTrue: 

#Кладемвпеременнуюsсодержимоебуфераобмена 

s=pyperclip.paste() 

#Еслиполученноесодержимоенеравнопредыдущему,то: 

if(s!=old): 

#печатаемего 

print(s) 

#впеременнуюoldзаписываемтекущеепойманноезначение 

#чтобывследующийвитокцикланеповторятьсяинепечататьто,чтоужепоймано 

old=s 

#Вконцевиткацикладелаемпаузуводнусекунду,чтобысодержимоебуфераобменауспелопрогрузиться 

time.sleep(1) 

Ну вот, поздравляю, ты написал программу, которая может ловить все, что юзер копирует в буфер обмена. Дальше ее можно развивать — к примеру, вместо вывода на экран записывать пойманные строки в файл с логом или отправлять по сети. Но мы ведь только начали, правда? 

Скачано с сайта -https://supersliv.biz – Присоединяйся к лучшим Домашнее задание 

Давай я дам тебе парочку посильных заданий на дом, чтобы ты мог поупражняться сам. 

Сделай программу, которая вычисляет твой идеальный вес в зависимости от роста и возраста. Найди соответствующую формулу в поисковых системах и реализуй условие для расчета. Пиво пивом, а за здоровьем нужно следить! 

Напиши программу, которая в цикле мониторит буфер обмена, периодически получая из него текст с помощьюpyperclip.paste(), и, если видит, что кем‑то был скопирован email, заменяет этот email другим, заранее прописанным в коде, помещая его в буфер обмена командойpyperclip.copy('coolhacker@xakep.ru').
